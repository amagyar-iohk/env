
services:
  traefik:
    image: "traefik:v3.2"
    container_name: "traefik"
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entryPoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      default:
        aliases:
          - whoami.localhost
          - cloudagent.localhost
          - didcomm.localhost
          - mediator.localhost

  whoami:
    image: "traefik/whoami"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.localhost`)"
      - "traefik.http.routers.whoami.entrypoints=web"

  cloud-agent:
    image: docker.io/identus/identus-cloud-agent:${CLOUD_AGENT_VERSION}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.cloud-agent.rule=Host(`cloudagent.localhost`)"
      - "traefik.http.routers.cloud-agent.entrypoints=web"
      - "traefik.http.routers.cloud-agent.service=cloud-agent"
      - "traefik.http.services.cloud-agent.loadbalancer.server.port=8085"
      - "traefik.http.routers.didcomm.rule=Host(`didcomm.localhost`)"
      - "traefik.http.routers.didcomm.entrypoints=web"
      - "traefik.http.routers.didcomm.service=didcomm"
      - "traefik.http.services.didcomm.loadbalancer.server.port=8090"
    ports:
      - "8085" # API endpoint
      - "8090" # DIDComm endpoint
    environment:
      POLLUX_DB_HOST: db
      POLLUX_DB_PORT: 5432
      POLLUX_DB_NAME: pollux
      POLLUX_DB_USER: postgres
      POLLUX_DB_PASSWORD: postgres
      CONNECT_DB_HOST: db
      CONNECT_DB_PORT: 5432
      CONNECT_DB_NAME: connect
      CONNECT_DB_USER: postgres
      CONNECT_DB_PASSWORD: postgres
      AGENT_DB_HOST: db
      AGENT_DB_PORT: 5432
      AGENT_DB_NAME: agent
      AGENT_DB_USER: postgres
      AGENT_DB_PASSWORD: postgres
      PRISM_NODE_HOST: prism-node
      PRISM_NODE_PORT: 50053
      POLLUX_STATUS_LIST_REGISTRY_PUBLIC_URL: http://cloudagent.localhost
      DIDCOMM_SERVICE_URL: http://didcomm.localhost
      REST_SERVICE_URL: http://cloudagent.localhost
      SECRET_STORAGE_BACKEND: postgres
      DEV_MODE: true
      API_KEY_ENABLED: false
    depends_on:
      db:
        condition: service_healthy
      prism-node:
        condition: service_started
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://cloud-agent:8085/_system/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

  identus-mediator:
    image: docker.io/identus/identus-mediator:${MEDIATOR_VERSION}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mediator.rule=Host(`mediator.localhost`)"
      - "traefik.http.routers.mediator.entrypoints=web"
      - "traefik.http.services.mediator.loadbalancer.server.port=8080"
    ports:
      - "8080"
    environment:
      # Creates the identity:
      # These keys are for demo purpose only for production deployments generate keys
      # Please follow the README file in the Mediator repository for guidelines on How to generate JWK format keys
      # KEY_AGREEMENT KEY_AUTHENTICATION are using format JOSE(JWK) OKP type base64urlsafe encoded keys
      - KEY_AGREEMENT_D=Z6D8LduZgZ6LnrOHPrMTS6uU2u5Btsrk1SGs4fn8M7c
      - KEY_AGREEMENT_X=Sr4SkIskjN_VdKTn0zkjYbhGTWArdUNE4j_DmUpnQGw
      - KEY_AUTHENTICATION_D=INXCnxFEl0atLIIQYruHzGd5sUivMRyQOzu87qVerug
      - KEY_AUTHENTICATION_X=MBjnXZxkMcoQVVL21hahWAw43RuAG-i64ipbeKKqwoA
      - SERVICE_ENDPOINTS=http://mediator.localhost;ws://mediator.localhost/ws
      - MONGODB_USER=admin
      - MONGODB_PASSWORD=admin
      - MONGODB_PROTOCOL=mongodb
      - MONGODB_HOST=mongo
      - MONGODB_PORT=27018
      - MONGODB_DB_NAME=mediator
    depends_on:
      - "mongo"

  db:
    image: postgres:13
    environment:
      POSTGRES_MULTIPLE_DATABASES: "pollux,connect,agent,node_db"
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - pg_data_db:/var/lib/postgresql/data
      - ../resources/postgres-init-script.sh:/docker-entrypoint-initdb.d/init-script.sh
      - ../resources/postgres-max_conns.sql:/docker-entrypoint-initdb.d/max_conns.sql
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "postgres", "-d", "agent" ]
      interval: 10s
      timeout: 5s
      retries: 5

  prism-node:
    image: docker.io/identus/prism-node:${PRISM_NODE_VERSION}
    environment:
      NODE_PSQL_HOST: db:5432
      NODE_REFRESH_AND_SUBMIT_PERIOD:
      NODE_MOVE_SCHEDULED_TO_PENDING_PERIOD:
      NODE_WALLET_MAX_TPS:
        # NODE_PSQL_USERNAME: postgres
        # NODE_PSQL_HOST: database-prism-node.cluster-cv1pad4ulozd.eu-central-1.rds.amazonaws.com:5432
        # NODE_PSQL_PASSWORD: Gu3sa7hJEIu4URQSZcH4
        # NODE_PSQL_DATABASE: postgres
    depends_on:
      db:
        condition: service_healthy

  mongo:
    image: mongo:6.0
    ports:
      - "27017:27017"
    command: [ "--auth" ]
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin
      - MONGO_INITDB_DATABASE=mediator
    volumes:
      - ../resources/mongo-initdb.js:/docker-entrypoint-initdb.d/initdb.js

volumes:
  pg_data_db:
  mongo_db:
  mongo_configdb:
